{"version":3,"sources":["components/Map/index.js","App.js","reportWebVitals.js","index.js"],"names":["googleMapConfig","center","lat","lng","zoom","options","streetViewControl","mapContainerStyle","width","height","Map","useState","currentCircle","setCurrentCircle","radius","setRadius","circleCenter","setCircleCenter","keyInput","setKeyInput","apiKey","setApiKey","useLoadScript","googleMapsApiKey","isLoaded","loadError","isMapMount","setIsMapMount","onCircleComplete","circle","setMap","style","padding","margin","type","name","value","onChange","e","target","onClick","border","circleOptions","fillColor","strokeColor","fillOpacity","drawingControlOptions","drawingModes","position","window","google","maps","ControlPosition","TOP_CENTER","App","React","memo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAGMA,EAAkB,CACtBC,OAAQ,CACNC,IAAK,UACLC,IAAK,YAEPC,KAAM,GACNC,QAAS,CACPC,mBAAmB,GAErBC,kBAAmB,CACjBC,MAAO,QACPC,OAAQ,UA+EGC,EA3EH,WACV,MAA0CC,qBAA1C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4BF,mBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwCJ,qBAAxC,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAyBR,mBAAS,IAAlC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAA6BC,YAAc,CACzCC,iBAAiB,GAAD,OAAKH,EAAL,sDADXI,EAAP,EAAOA,SAASC,EAAhB,EAAgBA,UAGhB,EAAoCd,oBAAS,GAA7C,mBAAOe,EAAP,KAAmBC,EAAnB,KAEMC,EAAmB,SAACC,GACpBjB,IACFA,EAAckB,OAAO,MACrBjB,KAEFA,EAAiBgB,GACjBd,EAAUc,EAAOf,QACjBG,EAAgBY,EAAO5B,SAqCzB,OACE,sBAAK8B,MAAO,CAACC,QAAQ,QAArB,UACA,sBAAKD,MAAO,CAACE,OAAO,UAApB,gCACA,uBAAOC,KAAK,OAAOC,KAAK,WAAWC,MAAOlB,EAAUmB,SArClC,SAACC,GACnBnB,EAAYmB,EAAEC,OAAOH,QAoCwDL,MAAO,CAACE,OAAQ,WAC5FP,EAAW,wBAAQc,QA5BL,WACfb,GAAc,IA2BF,wBAAiD,wBAAQa,QAlCxD,WACbnB,EAAUH,GACVS,GAAc,IAgC+C,yBAE7D,sBAAKI,MAAO,CAACU,OAAO,iBAAiBjC,MAAM,SAA3C,WACEkB,GAAc,qBAAKK,MAAO,CAACC,QAAQ,QAArB,8CACbN,IAAeF,EA1BlB,cAAC,IAAD,2BAAexB,GAAf,aACA,cAAC,IAAD,CACE4B,iBAAkBA,EAClBvB,QAAS,CACPqC,cAAe,CACbC,UAAW,UACXC,YAAa,UACbC,YAAa,IAEfC,sBAAuB,CACrBC,aAAc,CAAC,UACfC,SAAUC,OAAOC,OAAOC,KAAKC,gBAAgBC,kBAeR,8CACxC5B,GAAa,4EAEd,sBAAKM,MAAO,CAACE,OAAO,UAApB,oBAAuCnB,EAAvC,SACA,sBAAKiB,MAAO,CAACE,OAAO,UAApB,0CAEsB,OAAZjB,QAAY,IAAZA,OAAA,EAAAA,EAAcd,QAAS,GAFjC,kBAEwD,OAAZc,QAAY,IAAZA,OAAA,EAAAA,EAAcb,QAAS,WCpFzE,SAASmD,IACP,OACE,mCACE,cAAC,EAAD,MAKSC,UAAMC,KAAKF,GCCXG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3c96b7fa.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {useLoadScript, GoogleMap, DrawingManager} from '@react-google-maps/api';\n\nconst googleMapConfig = {\n  center: {\n    lat: 25.041969,\n    lng: 121.544902,\n  },\n  zoom: 12,\n  options: {\n    streetViewControl: false,\n  },\n  mapContainerStyle: {\n    width: '800px',\n    height: '600px',\n  },\n};\n\nconst Map = () => {\n  const [currentCircle, setCurrentCircle] = useState();\n  const [radius, setRadius] = useState(0);\n  const [circleCenter, setCircleCenter] = useState();\n  const [keyInput, setKeyInput]=useState('');\n  const [apiKey,setApiKey]=useState('')\n  const {isLoaded,loadError} = useLoadScript({\n    googleMapsApiKey: `${apiKey}&libraries=geometry,places,visualization,drawing`,\n  });\n  const [isMapMount, setIsMapMount] = useState(false)\n\n  const onCircleComplete = (circle) => {\n    if (currentCircle) {\n      currentCircle.setMap(null);\n      setCurrentCircle();\n    }\n    setCurrentCircle(circle);\n    setRadius(circle.radius);\n    setCircleCenter(circle.center);\n  };\n\n  const inputOnChange=(e)=>{\n    setKeyInput(e.target.value)\n  }\n\n  const mountMap=()=>{\n    setApiKey(keyInput)\n    setIsMapMount(true)\n\n  }\n\n  const unMountMap=()=>{\n    setIsMapMount(false)\n\n  }\n\n  const renderMap =()=>(\n    <GoogleMap {...googleMapConfig}>\n    <DrawingManager\n      onCircleComplete={onCircleComplete}\n      options={{\n        circleOptions: {\n          fillColor: '#00c9e7',\n          strokeColor: '#00c9e7',\n          fillOpacity: 0.2,\n        },\n        drawingControlOptions: {\n          drawingModes: ['circle'],\n          position: window.google.maps.ControlPosition.TOP_CENTER,\n        },\n      }}\n    />\n  </GoogleMap>\n  )\n\n  return (\n    <div style={{padding:'32px'}}>\n    <div style={{margin:\"16px 0\"}}>Google Map API Key: \n    <input type=\"text\" name=\"keyInput\" value={keyInput} onChange={inputOnChange} style={{margin: '0 8px'}}/>\n    {isMapMount?<button onClick={unMountMap}>Unload Map</button>:<button onClick={mountMap}>Load Map</button>}\n    </div>\n    <div style={{border:'1px solid gray',width:'800px'}}>\n    {!isMapMount && <div style={{padding:'16px'}}> Please enter an API Key above. </div>}\n      {isMapMount && (isLoaded ? renderMap() : <div>Loading...</div>)}\n      {loadError && <div>Map cannot be loaded right now, sorry.</div>}\n    </div>\n      <div style={{margin:\"16px 0\"}}>Radius:{radius} m </div>\n      <div style={{margin:\"16px 0\"}}>\n        Circle Center:\n        {`lat:${circleCenter?.lat() || ''}, lng:${circleCenter?.lng() || ''}`}\n      </div>\n    </div>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport Map from './components/Map';\n\nfunction App() {\n  return (\n    <>\n      <Map />\n    </>\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}